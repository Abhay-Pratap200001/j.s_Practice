ðŸ”¥ 1. JavaScript Object Topics for Interviews
Interviewers mostly test fundamentals + tricky concepts:


<------------------------------------------------------------------------------------------------>



âœ… Basics

What is an object? ({ key: value })

Dot notation vs Bracket notation (obj.key vs obj["key"])

Adding / Updating / Deleting properties (delete obj.key)

Property shorthand ({ name, age })




<----------------------------------------------------------------------------------------------------------->




âœ… Advanced Concepts

this keyword (context, arrow vs normal function)

Prototype & Inheritance (__proto__, Object.create)

Difference between primitive vs reference types

Pass by value vs pass by reference

Object equality check (shallow vs deep comparison)

Optional chaining (obj?.key?.subKey)

Destructuring (const {name, age} = obj)

Spread operator with objects ({...obj, newKey: "value"})




<------------------------------------------------------------------------------------------------------>





âœ… Interview Questions (Common)

Difference between Object.keys(obj).length vs for...in loop

How to deep clone an object (JSON.parse(JSON.stringify(obj)), structuredClone)

How Object.assign() works

Difference between for...in vs for...of

delete obj.key vs obj.key = undefined

How to freeze/lock an object (Object.freeze, Object.seal)

Difference between hasOwnProperty vs in operator

What are getters & setters in objects




<------------------------------------------------------------------------------------------------------>




âš¡ 2. JavaScript Object Methods (Most Used in Projects)
âœ… Creation

Object literal â†’ const obj = { name: "Abhay", age: 22 }

Constructor function â†’ function Person(name) { this.name = name }

Class syntax â†’ class Person { constructor(name) { this.name = name } }

Object.create(proto) â†’ create with prototype




<------------------------------------------------------------------------------------------------------>





âœ… Object Methods (Static)

Object.keys(obj) â†’ array of keys

Object.values(obj) â†’ array of values

Object.entries(obj) â†’ array of [key, value] pairs

Object.fromEntries(arr) â†’ reverse of entries (array â†’ object)

Object.assign(target, ...sources) â†’ copy/merge objects

Object.freeze(obj) â†’ prevent modifications (immutable)

Object.seal(obj) â†’ prevent adding/removing properties but can update values

Object.preventExtensions(obj) â†’ prevent adding new properties

Object.is(obj1, obj2) â†’ check strict equality (like === but handles NaN)

Object.hasOwn(obj, key) â†’ check if property exists (modern replacement of hasOwnProperty)





<---------------------------------------------------------------------------------------------------------->





âœ… Iterating over Objects

for...in â†’ loop keys

Object.keys(obj).forEach() â†’ iterate keys

Object.entries(obj).map() â†’ iterate key-value pairs




<-------------------------------------------------------------------------------------------------------->




âœ… Daily Used Tricks in Projects

Destructuring

const user = { name: "Abhay", age: 22 };
const { name, age } = user; // extract props


Spread operator

const newUser = { ...user, city: "Delhi" };


Optional chaining

console.log(user?.address?.city);


Default values with destructuring

const { role = "guest" } = user;


Dynamic keys

const key = "email";
const obj = { [key]: "test@mail.com" };


Merging objects

const merged = { ...obj1, ...obj2 };





<-------------------------------------------------------------------------------------------------------->





ðŸš€ Most Used in Real Projects

Object.keys / Object.values / Object.entries â†’ when handling API data

Spread ({ ...obj }) â†’ immutability in React/Redux

Destructuring â†’ extracting props/state

Optional chaining (?.) â†’ safe API response handling

Object.assign â†’ merging configs/objects

Object.freeze â†’ making constants immutable

delete â†’ remove property from object before sending response

JSON.stringify / JSON.parse â†’ API calls, localStorage handling