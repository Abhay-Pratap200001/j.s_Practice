ðŸ”¥ 1. String Topics for Interviews (Theory + DSA)
These are the concepts interviewers love to test:

// -----------------------------------------------------------
Basics

Immutable nature of strings

String vs character array

Unicode / ASCII / UTF-8 basics

Reversal & Palindrome

Reverse a string

Check palindrome

Longest palindromic substring

Searching & Matching

Substring search (indexOf, KMP algorithm, Rabin-Karp basics)

Pattern matching (regex, wildcard * and ?)

Frequency & Counting

Count frequency of characters

First non-repeating character

Anagram check (two strings are permutations)

Grouping anagrams

Manipulation

Remove duplicates

Remove white spaces / special characters

Replace words / characters

Split and join strings

Conversions

String â†” Number (parseInt, parseFloat, toString)

String â†” Array (split, Array.from)

Advanced

Longest common prefix (important in coding rounds)

Rotate strings (left / right shift)

String compression (Run-length encoding style)

Subsequence vs Substring problems

Sliding window problems (longest substring without repeating characters, etc.)

ðŸ‘‰ Most FAANG-style questions around strings are based on:

Palindrome

Substring sliding window

Anagram / frequency map

Regex / pattern matching

// <-----------------------------------------------------------------------------------------------> 

âš¡ 2. String Methods Commonly Used in Real Projects (JavaScript Focus)

In web/MERN projects, you constantly deal with strings: formatting user input, URLs, API responses, DB queries, etc.

Here are the must-know methods (JavaScript, but almost same in other languages):


// -----------------------------------------------------------------
âœ… Basic String Properties

.length â†’ find string length

âœ… Accessing Characters

str[index]

.charAt(index)

.charCodeAt(index)

âœ… Searching

.indexOf(substring)

.lastIndexOf(substring)

.includes(substring)

.startsWith(prefix)

.endsWith(suffix)

âœ… Extracting

.slice(start, end)

.substring(start, end)

.substr(start, length) (deprecated but asked in interviews)

âœ… Modifying

.toUpperCase() / .toLowerCase()

.trim() / .trimStart() / .trimEnd()

.padStart() / .padEnd() (useful for formatting)

.repeat(n)

âœ… Splitting & Joining

.split(separator) â†’ converts string to array

.join(separator) â†’ converts array to string

âœ… Replacing

.replace(old, new)

.replaceAll(old, new)

Regex-based replace â†’ .replace(/pattern/g, new)

âœ… String with Arrays

Template literals (`Hello ${name}`)

Concatenation (+ or .concat())

âœ… Useful Utilities

.match(regex)

.matchAll(regex)

.search(regex)



// <-------------------------------------------------->
ðŸš€ Most Used in Projects

When youâ€™re actually building apps, the most common string methods are:

// ---------------------------------------------------------------------
.trim() â†’ clean user input

.toLowerCase() / .toUpperCase() â†’ normalize case before saving/searching

.split() / .join() â†’ handle CSV, tags, lists, etc.

.replace() / .replaceAll() â†’ sanitize input, format strings

.includes() / .startsWith() / .endsWith() â†’ searching and filtering

Template literals â†’ dynamic rendering (Hello ${user.name})
âœ… So for interviews, focus more on palindrome, substring, frequency map, regex, sliding window.
âœ… For projects, master string methods (trim, split, replace, includes, toLowerCase).
// ---------------------------------------------------------------------------------------